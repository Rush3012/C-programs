#include <stdio.h>
#include <stdlib.h>

// Node structure for AVL tree
typedef struct Node {
    int key;
    struct Node *left;
    struct Node *right;
    int height;
} Node;

// Function to create a new node
Node *createNode(int key) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    newNode->key = key;
    newNode->left = NULL;
    newNode->right = NULL;
    newNode->height = 1;
    return newNode;
}

// Function to get height of a node
int height(Node *node) {
    if (node == NULL)
        return 0;
    return node->height;
}

// Function to get maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to right rotate subtree rooted with y
Node *rightRotate(Node *y) {
    Node *x = y->left;
    Node *T = x->right;

    // Perform rotation
    x->right = y;
    y->left = T;

    // Update heights
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;

    // Return new root
    return x;
}

// Function to left rotate subtree rooted with x
Node *leftRotate(Node *x) {
    Node *y = x->right;
    Node *T = y->left;

    // Perform rotation
    y->left = x;
    x->right = T;

    // Update heights
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    // Return new root
    return y;
}

// Function to balance the AVL tree
Node *balance(Node *node, int key) {
    // Update height of current node
    node->height = 1 + max(height(node->left), height(node->right));

    // Get balance factor
    int balanceFactor = height(node->left) - height(node->right);

    // Left heavy
    if (balanceFactor > 1 && key < node->left->key)
        return rightRotate(node);

    // Right heavy
    if (balanceFactor < -1 && key > node->right->key)
        return leftRotate(node);

    // Left Right heavy
    if (balanceFactor > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    // Right Left heavy
    if (balanceFactor < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node;
}

// Function to insert a key in AVL tree
Node *insert(Node *node, int key) {
    // Perform normal BST insertion
    if (node == NULL)
        return createNode(key);

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else // Equal keys are not allowed in AVL
        return node;

    // Update height of this ancestor node
    node->height = 1 + max(height(node->left), height(node->right));

    // Balance the tree
    return balance(node, key);
}

// Function to search for a key in AVL tree and print path
void searchAndPrintPath(Node *root, int key) {
    if (root == NULL || root->key == key) {
        printf("%d ", key);
        return;
    }

    printf("%d ", root->key);

    if (key < root->key)
        searchAndPrintPath(root->left, key);
    else
        searchAndPrintPath(root->right, key);
}

// Preorder traversal of AVL tree
void preorder(Node *root) {
    if (root == NULL)
        return;

    printf("%d ", root->key);
    preorder(root->left);
    preorder(root->right);
}

// Function to calculate the number of left and right rotations required to balance the AVL tree at a point
void calculateRotations(Node *root, int key) {
    Node *node = root;
    int leftRotations = 0, rightRotations = 0;

    while (node != NULL && node->key != key) {
        if (key < node->key) {
            rightRotations++;
            node = node->left;
        } else {
            leftRotations++;
            node = node->right;
        }
    }

    if (node == NULL) {
        printf("-1\n");
        return;
    }

    printf("%d %d\n", leftRotations, rightRotations);
}

int main() {
    Node *root = NULL;
    char op;
    int key;
    while (1) {
        scanf(" %c", &op);
        if (op == 'e')
            break;
        switch (op) {
            case 'i':
                scanf("%d", &key);
                root = insert(root, key);
                break;
            case 'x':
                scanf("%d", &key);
                searchAndPrintPath(root, key);
                printf("\n");
                break;
            case 'p':
                preorder(root);
                printf("\n");
                break;
            case 's':
                scanf("%d", &key);
                calculateRotations(root, key);
                break;
        }
    }
    return 0;
}


// Function to calculate the total number of left and right rotations required to balance the AVL tree
void calculateRotations(Node *root) {
    if (root == NULL) {
        printf("0 0\n");
        return;
    }

    int leftRotations = 0, rightRotations = 0;
    Node *node = root;
    while (node->left != NULL || node->right != NULL) {
        if (height(node->left) >= height(node->right)) {
            rightRotations++;
            node = node->left;
        } else {
            leftRotations++;
            node = node->right;
        }
    }

    printf("%d %d\n", leftRotations, rightRotations);
}
